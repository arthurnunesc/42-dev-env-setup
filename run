#!/usr/bin/env sh

USER=$(whoami) # Making sure USER variable exists
user_share="/sgoinfre/Perso/$USER"

# Defining install folder
printf "\033[34mwhat folder do you want to use as your binaries folder?\033[0m\n"
printf "1. /sgoinfre/Perso/%s/.local/bin\n" "$USER"
printf "2. %s/.local/bin\n" "$HOME"
read option
counter=0
while [ -z "$option" ] && [ "$counter" -lt 3 ]; do
  printf "\033[33mplease enter a valid option\033[0m\n"
  read option
  counter=$((counter + 1))
done
if [ -z "$option" ]; then
  printf "\033[31mno valid option entered, exiting...\033[0m\n"
  exit 1
fi
if [ "$option" -eq '1' ]; then
  bin_dir="$user_share/.local/bin"
  if [ -d "$user_share" ]; then
    echo "$user_share directory already exists."
  else
    echo "creating $user_share directory..."
    mkdir -p "$user_share"
    chmod -R 700 "$user_share"
  fi
elif [ "$option" -eq '2' ]; then
  bin_dir="$HOME/.local/bin"
  if [ -d "$bin_dir" ]; then
    echo "$bin_dir directory already exists."
  else
    echo "creating $bin_dir directory..."
    mkdir -p "$bin_dir"
  fi
fi

# Making sure binaries folder exist before installing things into them
if [ -d "$bin_dir" ]; then
  echo "$bin_dir directory already exists."
else
  echo "creating $bin_dir directory..."
  mkdir -p "$bin_dir"
fi

# Installing brew, always in the $HOME/.brew folder
printf "\033[34m[ brew - begin ]\033[40m\n"
if [ -f "$HOME"/.brew/bin/brew ]; then
  printf "\033[35mbrew\033[0m is already installed.\n"
else
  printf "installing \033[35mbrew\033[0m...\n"
  rm -rf "$HOME"/.brew && git clone --depth=1 https://github.com/Homebrew/brew "$HOME"/.brew
fi
echo "fetching repo updates..."
"$HOME"/.brew/bin/brew update -q
echo "upgrading packages..."
"$HOME"/.brew/bin/brew upgrade -q
echo "cleaning up..."
"$HOME"/.brew/bin/brew cleanup -q
printf "\033[34m[ brew - end ]\033[40m\n"


# Installing chezmoi, stow, nvim, kitty, starship and obsidian
if [ -f "$bin_dir"/chezmoi ]; then
  printf "\033[35mchezmoi\033[0m is already installed.\n"
else
  printf "installing \033[35mchezmoi\033[0m...\n"
  sh -c "$(curl -fsLS get.chezmoi.io)" -- -b "$bin_dir"
fi

if [ -f "$bin_dir"/stow ]; then
  printf "\033[35mstow\033[0m is already installed.\n"
else
  printf "installing \033[35mstow\033[0m...\n"
  curl -L http://ftp.gnu.org/gnu/stow/stow-2.3.1.tar.gz | tar -xz -C /tmp/
  cd /tmp/stow-2.3.1
    if [ "$option" -eq '2' ]; then
	  ./stow-2.3.1/configure --prefix=$"$HOME"/.local && make install
	else
	  ./stow-2.3.1/configure --prefix="$user_share"/.local && make install
  cd -
fi

if [ -f "$bin_dir"/nvim ]; then
  printf "\033[35mnvim\033[0m is already installed.\n"
else
  printf "installing \033[35mnvim\033[0m...\n"
  if [ "$option" -eq '2' ]; then
    curl -L https://github.com/neovim/neovim/releases/download/stable/nvim-macos.tar.gz | tar -xz --strip 1 -C "$HOME"/.local
  else
    curl -L https://github.com/neovim/neovim/releases/download/stable/nvim-macos.tar.gz | tar -xz --strip 1 -C "$user_share"/.local
  fi
fi

if [ -f "$bin_dir"/kitty.app ]; then
  printf "\033[35mkitty\033[0m is already installed.\n"
else
  printf "installing \033[35mkitty\033[0m...\n"
  curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin \
  dest="$bin_dir"
fi

if [ -f "$bin_dir"/starship ]; then
  printf "\033[35mstarship\033[0m is already installed.\n"
else
  printf "installing \033[35mstarship\033[0m...\n"
  curl -L https://github.com/starship/starship/releases/latest/download/starship-x86_64-apple-darwin.tar.gz | tar -xz -C "$bin_dir"
fi

if [ -f "$bin_dir"/Obsidian.app ]; then
  printf "\033[35mobsidian\033[0m is already installed.\n"
else
  printf "installing \033[35mobsidian\033[0m...\n"
  curl -L https://github.com/obsidianmd/obsidian-releases/releases/download/v1.1.16/Obsidian-1.1.16-universal.dmg | tar -xz -C "$bin_dir"
fi

# Installing command line utilities
brew install -q fzf

# Dotfiles
"$bin_dir"/chezmoi init --apply git@github.com:arthurnunesc/dotfiles.git

printf "setting up \033[35mgit variables\033[0m..."
git config --global user.email "arthurnunesc@proton.me"
git config --global user.name "Arthur Nunes"
git config --global core.editor "nvim"

printf "\n **everything done** \n"
